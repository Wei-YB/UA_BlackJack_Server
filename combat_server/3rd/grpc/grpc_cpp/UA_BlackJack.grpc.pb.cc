// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: UA_BlackJack.proto

#include "UA_BlackJack.pb.h"
#include "UA_BlackJack.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ua_blackjack {

static const char* LobbyService_method_names[] = {
  "/ua_blackjack.LobbyService/Notify",
};

std::unique_ptr< LobbyService::Stub> LobbyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LobbyService::Stub> stub(new LobbyService::Stub(channel, options));
  return stub;
}

LobbyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Notify_(LobbyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LobbyService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Notify_, context, request, response);
}

void LobbyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, std::move(f));
}

void LobbyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* LobbyService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ua_blackjack::Response, ::ua_blackjack::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* LobbyService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

LobbyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LobbyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LobbyService::Service, ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LobbyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ua_blackjack::Request* req,
             ::ua_blackjack::Response* resp) {
               return service->Notify(ctx, req, resp);
             }, this)));
}

LobbyService::Service::~Service() {
}

::grpc::Status LobbyService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* GameService_method_names[] = {
  "/ua_blackjack.GameService/Notify",
};

std::unique_ptr< GameService::Stub> GameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GameService::Stub> stub(new GameService::Stub(channel, options));
  return stub;
}

GameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Notify_(GameService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GameService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Notify_, context, request, response);
}

void GameService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, std::move(f));
}

void GameService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* GameService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ua_blackjack::Response, ::ua_blackjack::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* GameService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

GameService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ua_blackjack::Request* req,
             ::ua_blackjack::Response* resp) {
               return service->Notify(ctx, req, resp);
             }, this)));
}

GameService::Service::~Service() {
}

::grpc::Status GameService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SocialService_method_names[] = {
  "/ua_blackjack.SocialService/Notify",
};

std::unique_ptr< SocialService::Stub> SocialService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SocialService::Stub> stub(new SocialService::Stub(channel, options));
  return stub;
}

SocialService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Notify_(SocialService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SocialService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Notify_, context, request, response);
}

void SocialService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, std::move(f));
}

void SocialService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* SocialService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ua_blackjack::Response, ::ua_blackjack::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* SocialService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

SocialService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SocialService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SocialService::Service, ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SocialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ua_blackjack::Request* req,
             ::ua_blackjack::Response* resp) {
               return service->Notify(ctx, req, resp);
             }, this)));
}

SocialService::Service::~Service() {
}

::grpc::Status SocialService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PlayerService_method_names[] = {
  "/ua_blackjack.PlayerService/Notify",
};

std::unique_ptr< PlayerService::Stub> PlayerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlayerService::Stub> stub(new PlayerService::Stub(channel, options));
  return stub;
}

PlayerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Notify_(PlayerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlayerService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Notify_, context, request, response);
}

void PlayerService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* PlayerService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ua_blackjack::Response, ::ua_blackjack::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* PlayerService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

PlayerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ua_blackjack::Request* req,
             ::ua_blackjack::Response* resp) {
               return service->Notify(ctx, req, resp);
             }, this)));
}

PlayerService::Service::~Service() {
}

::grpc::Status PlayerService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DatabaseService_method_names[] = {
  "/ua_blackjack.DatabaseService/Notify",
};

std::unique_ptr< DatabaseService::Stub> DatabaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatabaseService::Stub> stub(new DatabaseService::Stub(channel, options));
  return stub;
}

DatabaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Notify_(DatabaseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Notify_, context, request, response);
}

void DatabaseService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, std::move(f));
}

void DatabaseService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* DatabaseService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ua_blackjack::Response, ::ua_blackjack::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* DatabaseService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

DatabaseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ua_blackjack::Request* req,
             ::ua_blackjack::Response* resp) {
               return service->Notify(ctx, req, resp);
             }, this)));
}

DatabaseService::Service::~Service() {
}

::grpc::Status DatabaseService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ProxyService_method_names[] = {
  "/ua_blackjack.ProxyService/Notify",
};

std::unique_ptr< ProxyService::Stub> ProxyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProxyService::Stub> stub(new ProxyService::Stub(channel, options));
  return stub;
}

ProxyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Notify_(ProxyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProxyService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Notify_, context, request, response);
}

void ProxyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, std::move(f));
}

void ProxyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* ProxyService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ua_blackjack::Response, ::ua_blackjack::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* ProxyService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProxyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProxyService::Service, ::ua_blackjack::Request, ::ua_blackjack::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProxyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ua_blackjack::Request* req,
             ::ua_blackjack::Response* resp) {
               return service->Notify(ctx, req, resp);
             }, this)));
}

ProxyService::Service::~Service() {
}

::grpc::Status ProxyService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ua_blackjack

