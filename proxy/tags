!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEPT_FRIEND	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::ACCEPT_FRIEND;$/;"	m	class:ua_blackjack::Request	file:
ACCEPT_FRIEND	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType ACCEPT_FRIEND =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
ADD_FRIEND	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::ADD_FRIEND;$/;"	m	class:ua_blackjack::Request	file:
ADD_FRIEND	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType ADD_FRIEND =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
ADD_WAIT_FRIEND	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::ADD_WAIT_FRIEND;$/;"	m	class:ua_blackjack::Request	file:
ADD_WAIT_FRIEND	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType ADD_WAIT_FRIEND =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
ArenaDtor	include/grpc/UA_BlackJack.pb.cc	/^void Request::ArenaDtor(void* object) {$/;"	f	class:ua_blackjack::Request
ArenaDtor	include/grpc/UA_BlackJack.pb.cc	/^void Response::ArenaDtor(void* object) {$/;"	f	class:ua_blackjack::Response
AsyncCall	include/asyncProxyServer.h	/^    AsyncCall() : responder_(&ctx_), status_(CREATE) {}$/;"	f	struct:AsyncCall
AsyncCall	include/asyncProxyServer.h	/^struct AsyncCall$/;"	s
AsyncCall	test/RpcServer.h	/^    AsyncCall(AsyncRpcService *service, $/;"	f	class:AsyncCall
AsyncCall	test/RpcServer.h	/^class AsyncCall$/;"	c
AsyncClientCall	include/asyncServiceClient.h	/^    struct AsyncClientCall$/;"	s	class:ServiceClient
AsyncCompleteRpc	include/asyncServiceClient.h	/^    void AsyncCompleteRpc()$/;"	f	class:ServiceClient
AsyncCompleteRpc_	include/asyncServiceClient.h	/^    void AsyncCompleteRpc_()$/;"	f	class:ServiceClient
AsyncCompleteRpc_stand_alone_	include/asyncServiceClient.h	/^    void AsyncCompleteRpc_stand_alone_()$/;"	f	class:ServiceClient
AsyncNotify	include/grpc/UA_BlackJack.grpc.pb.h	/^    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>> AsyncNotify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::final::final
AsyncNotify	include/grpc/UA_BlackJack.grpc.pb.h	/^    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ua_blackjack::Response>> AsyncNotify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::final::StubInterface
AsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* DatabaseService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::DatabaseService::Stub
AsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* GameService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::GameService::Stub
AsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* LobbyService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::LobbyService::Stub
AsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* PlayerService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::PlayerService::Stub
AsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* ProxyService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::ProxyService::Stub
AsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* SocialService::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::SocialService::Stub
AsyncRpcServer	test/RpcServer.h	/^    AsyncRpcServer( const std::string &serverAddr, $/;"	f	class:final
AsyncService	include/grpc/UA_BlackJack.grpc.pb.h	/^  typedef WithAsyncMethod_Notify<Service > AsyncService;$/;"	t	class:ua_blackjack::final
BET	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::BET;$/;"	m	class:ua_blackjack::Request	file:
BET	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType BET =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
BUFFER_SIZE	include/ProxyServer.h	16;"	d
BUFFER_SIZE	src/ProxyServer.cc	25;"	d	file:
BackEndModule	include/common.h	/^enum BackEndModule {Proxy = 0, Lobby, Room, Social, Player, DataBase};$/;"	g
BaseClassMustBeDerivedFromService	include/grpc/UA_BlackJack.grpc.pb.h	/^    void BaseClassMustBeDerivedFromService(const Service* \/*service*\/) {}$/;"	f	class:ua_blackjack::final::ExperimentalWithCallbackMethod_Notify
BaseClassMustBeDerivedFromService	include/grpc/UA_BlackJack.grpc.pb.h	/^    void BaseClassMustBeDerivedFromService(const Service* \/*service*\/) {}$/;"	f	class:ua_blackjack::final::ExperimentalWithRawCallbackMethod_Notify
BaseClassMustBeDerivedFromService	include/grpc/UA_BlackJack.grpc.pb.h	/^    void BaseClassMustBeDerivedFromService(const Service* \/*service*\/) {}$/;"	f	class:ua_blackjack::final::WithAsyncMethod_Notify
BaseClassMustBeDerivedFromService	include/grpc/UA_BlackJack.grpc.pb.h	/^    void BaseClassMustBeDerivedFromService(const Service* \/*service*\/) {}$/;"	f	class:ua_blackjack::final::WithGenericMethod_Notify
BaseClassMustBeDerivedFromService	include/grpc/UA_BlackJack.grpc.pb.h	/^    void BaseClassMustBeDerivedFromService(const Service* \/*service*\/) {}$/;"	f	class:ua_blackjack::final::WithRawMethod_Notify
BaseClassMustBeDerivedFromService	include/grpc/UA_BlackJack.grpc.pb.h	/^    void BaseClassMustBeDerivedFromService(const Service* \/*service*\/) {}$/;"	f	class:ua_blackjack::final::WithStreamedUnaryMethod_Notify
BlackJackClient	test/client.cpp	/^    BlackJackClient(const char *server_ip, $/;"	f	class:BlackJackClient
BlackJackClient	test/client.cpp	/^class BlackJackClient$/;"	c	file:
ByteSizeLong	include/grpc/UA_BlackJack.pb.cc	/^size_t Request::ByteSizeLong() const {$/;"	f	class:ua_blackjack::Request
ByteSizeLong	include/grpc/UA_BlackJack.pb.cc	/^size_t Response::ByteSizeLong() const {$/;"	f	class:ua_blackjack::Response
CHK_	include/grpc/UA_BlackJack.pb.cc	310;"	d	file:
CHK_	include/grpc/UA_BlackJack.pb.cc	375;"	d	file:
CHK_	include/grpc/UA_BlackJack.pb.cc	622;"	d	file:
CHK_	include/grpc/UA_BlackJack.pb.cc	687;"	d	file:
CREATE	include/asyncProxyServer.h	/^    enum CallStatus {CREATE, PROCESS, FORWARD, FINISH};$/;"	e	enum:__anon1::CallStatus
CREATE	test/RpcServer.h	/^    enum CallStatus {CREATE, PROCESS, FINISH};$/;"	e	enum:AsyncCall::CallStatus
CREATE_ROOM	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::CREATE_ROOM;$/;"	m	class:ua_blackjack::Request	file:
CREATE_ROOM	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType CREATE_ROOM =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
Call	include/asyncServiceClient.h	/^    int Call(const Request &request)$/;"	f	class:ConcreteServiceClient
CallStatus	include/asyncProxyServer.h	/^    enum CallStatus {CREATE, PROCESS, FORWARD, FINISH};$/;"	g	namespace:__anon1
CallStatus	test/RpcServer.h	/^    enum CallStatus {CREATE, PROCESS, FINISH};$/;"	g	class:AsyncCall
CallbackService	include/grpc/UA_BlackJack.grpc.pb.h	/^  typedef ExperimentalWithCallbackMethod_Notify<Service > CallbackService;$/;"	t	class:ua_blackjack::final
CircularBuffer	include/CircularBuffer.h	/^struct CircularBuffer$/;"	s	namespace:Net
CircularBuffer	src/CircularBuffer.cc	/^CircularBuffer::CircularBuffer(const CircularBuffer &circBuffer) : m_bufferSize(circBuffer.m_bufferSize)$/;"	f	class:CircularBuffer
CircularBuffer	src/CircularBuffer.cc	/^CircularBuffer::CircularBuffer(int bufferSize) : m_bufferSize(bufferSize)$/;"	f	class:CircularBuffer
CircularQueue	include/CircularBuffer.h	/^    CircularQueue(size_t capacity = QUEUE_CAPACITY) : m_capacity(capacity), m_head(0), m_tail(0)$/;"	f	class:Net::CircularQueue
CircularQueue	include/CircularBuffer.h	/^class CircularQueue {$/;"	c	namespace:Net
Clear	include/grpc/UA_BlackJack.pb.cc	/^void Request::Clear() {$/;"	f	class:ua_blackjack::Request
Clear	include/grpc/UA_BlackJack.pb.cc	/^void Response::Clear() {$/;"	f	class:ua_blackjack::Response
Client	include/Client.h	/^class Client$/;"	c
Client	src/Client.cc	/^Client::Client(std::shared_ptr<TcpConnection> conn,$/;"	f	class:Client
Close	src/EventLoop.cc	/^int EventsSource::Close()$/;"	f	class:EventsSource
ConcreteServiceClient	include/asyncServiceClient.h	/^    ConcreteServiceClient(const std::string &serviceName, $/;"	f	class:ConcreteServiceClient
ConcreteServiceClient	include/asyncServiceClient.h	/^class ConcreteServiceClient : public ServiceClient$/;"	c
Connect	src/TcpConnection.cc	/^int TcpConnection::Connect()$/;"	f	class:TcpConnection
Connect	test/client.cpp	/^    int Connect()$/;"	f	class:BlackJackClient
CopyFrom	include/grpc/UA_BlackJack.pb.cc	/^void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {$/;"	f	class:ua_blackjack::Request
CopyFrom	include/grpc/UA_BlackJack.pb.cc	/^void Request::CopyFrom(const Request& from) {$/;"	f	class:ua_blackjack::Request
CopyFrom	include/grpc/UA_BlackJack.pb.cc	/^void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {$/;"	f	class:ua_blackjack::Response
CopyFrom	include/grpc/UA_BlackJack.pb.cc	/^void Response::CopyFrom(const Response& from) {$/;"	f	class:ua_blackjack::Response
CreateMaybeMessage	include/grpc/UA_BlackJack.pb.cc	/^template<> PROTOBUF_NOINLINE ::ua_blackjack::Request* Arena::CreateMaybeMessage< ::ua_blackjack::Request >(Arena* arena) {$/;"	f	class:Arena
CreateMaybeMessage	include/grpc/UA_BlackJack.pb.cc	/^template<> PROTOBUF_NOINLINE ::ua_blackjack::Response* Arena::CreateMaybeMessage< ::ua_blackjack::Response >(Arena* arena) {$/;"	f	class:Arena
DEBUG_MODE	include/common.h	11;"	d
DEFAULT_BUFFER_SIZE	test/client.cpp	32;"	d	file:
DEFAULT_MAX_EVENTS	include/EventLoop.h	11;"	d
DEFAULT_WAIT_QUEUE_LEN	include/TcpServer.h	7;"	d
DELETE_FRIEND	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::DELETE_FRIEND;$/;"	m	class:ua_blackjack::Request	file:
DELETE_FRIEND	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType DELETE_FRIEND =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
DELETE_WAIT_FRIEND	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::DELETE_WAIT_FRIEND;$/;"	m	class:ua_blackjack::Request	file:
DELETE_WAIT_FRIEND	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType DELETE_WAIT_FRIEND =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
DOUBLE	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::DOUBLE;$/;"	m	class:ua_blackjack::Request	file:
DOUBLE	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType DOUBLE =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
DUMMY	include/ClientProxyProtocol.h	9;"	d
DataBase	include/common.h	/^enum BackEndModule {Proxy = 0, Lobby, Room, Social, Player, DataBase};$/;"	e	enum:BackEndModule
DatabaseService_method_names	include/grpc/UA_BlackJack.grpc.pb.cc	/^static const char* DatabaseService_method_names[] = {$/;"	m	namespace:ua_blackjack	file:
Deamonize	src/main.cpp	/^static void Deamonize(const std::unordered_map<std::string, std::string> &config)$/;"	f	file:
DestructorSkippable_	include/grpc/UA_BlackJack.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:ua_blackjack::PROTOBUF_FINAL
DisConnect	src/TcpConnection.cc	/^int TcpConnection::DisConnect()$/;"	f	class:TcpConnection
EV_ERR	include/EventLoop.h	/^static const Event EV_ERR = 0x20;$/;"	m	namespace:Net
EV_ET	include/EventLoop.h	/^static const Event EV_ET = 0x04;$/;"	m	namespace:Net
EV_HUP	include/EventLoop.h	/^static const Event EV_HUP = 0x10;$/;"	m	namespace:Net
EV_IN	include/EventLoop.h	/^static const Event EV_IN = 0x01;$/;"	m	namespace:Net
EV_NULL	include/EventLoop.h	/^static const Event EV_NULL = 0x00;$/;"	m	namespace:Net
EV_OUT	include/EventLoop.h	/^static const Event EV_OUT = 0x02;$/;"	m	namespace:Net
EV_RDHUP	include/EventLoop.h	/^static const Event EV_RDHUP = 0x08;$/;"	m	namespace:Net
EnableRead	src/EventLoop.cc	/^int EventsSource::EnableRead()$/;"	f	class:EventsSource
EnableWrite	src/EventLoop.cc	/^int EventsSource::EnableWrite()$/;"	f	class:EventsSource
Event	include/EventLoop.h	/^typedef int Event;$/;"	t	namespace:Net
EventLoop	include/EventLoop.h	/^class EventLoop$/;"	c	namespace:Net
EventLoop	src/EventLoop.cc	/^EventLoop::EventLoop(int max_events) : maxEvents_(max_events)$/;"	f	class:EventLoop
EventsSource	include/EventLoop.h	/^class EventsSource : public std::enable_shared_from_this<EventsSource>$/;"	c	namespace:Net
EventsSource	src/EventLoop.cc	/^EventsSource::EventsSource(FileDesc fd, EventLoop *loop,$/;"	f	class:EventsSource
ExperimentalCallbackService	include/grpc/UA_BlackJack.grpc.pb.h	/^  typedef ExperimentalWithCallbackMethod_Notify<Service > ExperimentalCallbackService;$/;"	t	class:ua_blackjack::final
ExperimentalWithCallbackMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    ExperimentalWithCallbackMethod_Notify() {$/;"	f	class:ua_blackjack::final::ExperimentalWithCallbackMethod_Notify
ExperimentalWithCallbackMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^  class ExperimentalWithCallbackMethod_Notify : public BaseClass {$/;"	c	class:ua_blackjack::final
ExperimentalWithRawCallbackMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    ExperimentalWithRawCallbackMethod_Notify() {$/;"	f	class:ua_blackjack::final::ExperimentalWithRawCallbackMethod_Notify
ExperimentalWithRawCallbackMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^  class ExperimentalWithRawCallbackMethod_Notify : public BaseClass {$/;"	c	class:ua_blackjack::final
FINISH	include/asyncProxyServer.h	/^    enum CallStatus {CREATE, PROCESS, FORWARD, FINISH};$/;"	e	enum:__anon1::CallStatus
FINISH	test/RpcServer.h	/^    enum CallStatus {CREATE, PROCESS, FINISH};$/;"	e	enum:AsyncCall::CallStatus
FORWARD	include/asyncProxyServer.h	/^    enum CallStatus {CREATE, PROCESS, FORWARD, FINISH};$/;"	e	enum:__anon1::CallStatus
FileDesc	include/common.h	/^typedef int FileDesc;$/;"	t
FullMessageName	include/grpc/UA_BlackJack.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
GAME_START	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::GAME_START;$/;"	m	class:ua_blackjack::Request	file:
GAME_START	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType GAME_START =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
GET_MATCH_INFO	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::GET_MATCH_INFO;$/;"	m	class:ua_blackjack::Request	file:
GET_MATCH_INFO	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType GET_MATCH_INFO =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
GET_NAME	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::GET_NAME;$/;"	m	class:ua_blackjack::Request	file:
GET_NAME	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType GET_NAME =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
GET_PASSWORD	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::GET_PASSWORD;$/;"	m	class:ua_blackjack::Request	file:
GET_PASSWORD	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType GET_PASSWORD =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
GET_SCORE	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::GET_SCORE;$/;"	m	class:ua_blackjack::Request	file:
GET_SCORE	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType GET_SCORE =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
GET_UID	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::GET_UID;$/;"	m	class:ua_blackjack::Request	file:
GET_UID	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType GET_UID =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
GOOGLE_PROTOBUF_INCLUDED_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.h	5;"	d
GRPC_UA_5fBlackJack_2eproto__INCLUDED	include/grpc/UA_BlackJack.grpc.pb.h	5;"	d
GameService_method_names	include/grpc/UA_BlackJack.grpc.pb.cc	/^static const char* GameService_method_names[] = {$/;"	m	namespace:ua_blackjack	file:
GetDescriptor	include/grpc/UA_BlackJack.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
GetEnumDescriptor	include/grpc/UA_BlackJack.pb.h	/^inline const EnumDescriptor* GetEnumDescriptor< ::ua_blackjack::Request_RequestType>() {$/;"	f
GetMetadata	include/grpc/UA_BlackJack.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {$/;"	f	class:ua_blackjack::Request
GetMetadata	include/grpc/UA_BlackJack.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {$/;"	f	class:ua_blackjack::Response
GetMetadataStatic	include/grpc/UA_BlackJack.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
GetReflection	include/grpc/UA_BlackJack.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
GetWriteBufferRoom	src/TcpConnection.cc	/^int TcpConnection::GetWriteBufferRoom() const {return writeBuffer_.capacity() - writeBuffer_.size();}/;"	f	class:TcpConnection
HIT	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::HIT;$/;"	m	class:ua_blackjack::Request	file:
HIT	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType HIT =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
HandleEvents	src/EventLoop.cc	/^int EventsSource::HandleEvents(Event events)$/;"	f	class:EventsSource
HandleRpcs	include/asyncProxyServer.h	/^    void HandleRpcs()$/;"	f	class:final
HandleRpcs	test/RpcServer.h	/^    void HandleRpcs()$/;"	f	class:final
INFO	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::INFO;$/;"	m	class:ua_blackjack::Request	file:
INFO	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType INFO =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
INVAL	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::INVAL;$/;"	m	class:ua_blackjack::Request	file:
INVAL	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType INVAL =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
InternalArenaConstructable_	include/grpc/UA_BlackJack.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:ua_blackjack::PROTOBUF_FINAL
InternalSwap	include/grpc/UA_BlackJack.pb.cc	/^void Request::InternalSwap(Request* other) {$/;"	f	class:ua_blackjack::Request
InternalSwap	include/grpc/UA_BlackJack.pb.cc	/^void Response::InternalSwap(Response* other) {$/;"	f	class:ua_blackjack::Response
IsInitialized	include/grpc/UA_BlackJack.pb.cc	/^bool Request::IsInitialized() const {$/;"	f	class:ua_blackjack::Request
IsInitialized	include/grpc/UA_BlackJack.pb.cc	/^bool Response::IsInitialized() const {$/;"	f	class:ua_blackjack::Response
JOIN_ROOM	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::JOIN_ROOM;$/;"	m	class:ua_blackjack::Request	file:
JOIN_ROOM	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType JOIN_ROOM =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
LEAVE_ROOM	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::LEAVE_ROOM;$/;"	m	class:ua_blackjack::Request	file:
LEAVE_ROOM	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType LEAVE_ROOM =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
LIST_FRIEND	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::LIST_FRIEND;$/;"	m	class:ua_blackjack::Request	file:
LIST_FRIEND	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType LIST_FRIEND =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
LIST_MATCH	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::LIST_MATCH;$/;"	m	class:ua_blackjack::Request	file:
LIST_MATCH	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType LIST_MATCH =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
LIST_WAITTING	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::LIST_WAITTING;$/;"	m	class:ua_blackjack::Request	file:
LIST_WAITTING	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType LIST_WAITTING =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
LOGIN	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::LOGIN;$/;"	m	class:ua_blackjack::Request	file:
LOGIN	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType LOGIN =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
LOGOUT	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::LOGOUT;$/;"	m	class:ua_blackjack::Request	file:
LOGOUT	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType LOGOUT =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
Lobby	include/common.h	/^enum BackEndModule {Proxy = 0, Lobby, Room, Social, Player, DataBase};$/;"	e	enum:BackEndModule
LobbyService_method_names	include/grpc/UA_BlackJack.grpc.pb.cc	/^static const char* LobbyService_method_names[] = {$/;"	m	namespace:ua_blackjack	file:
MATCH_END	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::MATCH_END;$/;"	m	class:ua_blackjack::Request	file:
MATCH_END	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType MATCH_END =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
MAX	include/CircularBuffer.h	8;"	d
MAX_FORWORD_FAILURE	include/ProxyServer.h	14;"	d
MIN	include/CircularBuffer.h	9;"	d
MergeFrom	include/grpc/UA_BlackJack.pb.cc	/^void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {$/;"	f	class:ua_blackjack::Request
MergeFrom	include/grpc/UA_BlackJack.pb.cc	/^void Request::MergeFrom(const Request& from) {$/;"	f	class:ua_blackjack::Request
MergeFrom	include/grpc/UA_BlackJack.pb.cc	/^void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {$/;"	f	class:ua_blackjack::Response
MergeFrom	include/grpc/UA_BlackJack.pb.cc	/^void Response::MergeFrom(const Response& from) {$/;"	f	class:ua_blackjack::Response
NAMESPACE_BEGIN	include/common.h	14;"	d
NAMESPACE_END	include/common.h	16;"	d
NOTIFY_USER	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::NOTIFY_USER;$/;"	m	class:ua_blackjack::Request	file:
NOTIFY_USER	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType NOTIFY_USER =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
NS	include/common.h	13;"	d
Net	include/CircularBuffer.h	/^namespace Net$/;"	n
Net	include/Client.h	/^namespace Net {$/;"	n
Net	include/EventLoop.h	/^namespace Net {$/;"	n
Net	include/ProxyServer.h	/^namespace Net {$/;"	n
Net	include/TcpConnection.h	/^namespace Net {$/;"	n
Net	include/TcpServer.h	/^namespace Net {$/;"	n
NewStub	include/grpc/UA_BlackJack.grpc.pb.cc	/^std::unique_ptr< DatabaseService::Stub> DatabaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {$/;"	f	class:ua_blackjack::DatabaseService
NewStub	include/grpc/UA_BlackJack.grpc.pb.cc	/^std::unique_ptr< GameService::Stub> GameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {$/;"	f	class:ua_blackjack::GameService
NewStub	include/grpc/UA_BlackJack.grpc.pb.cc	/^std::unique_ptr< LobbyService::Stub> LobbyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {$/;"	f	class:ua_blackjack::LobbyService
NewStub	include/grpc/UA_BlackJack.grpc.pb.cc	/^std::unique_ptr< PlayerService::Stub> PlayerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {$/;"	f	class:ua_blackjack::PlayerService
NewStub	include/grpc/UA_BlackJack.grpc.pb.cc	/^std::unique_ptr< ProxyService::Stub> ProxyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {$/;"	f	class:ua_blackjack::ProxyService
NewStub	include/grpc/UA_BlackJack.grpc.pb.cc	/^std::unique_ptr< SocialService::Stub> SocialService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {$/;"	f	class:ua_blackjack::SocialService
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status DatabaseService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::DatabaseService::Service
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status DatabaseService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::DatabaseService::Stub
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status GameService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::GameService::Service
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status GameService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::GameService::Stub
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status LobbyService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::LobbyService::Service
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status LobbyService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::LobbyService::Stub
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status PlayerService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::PlayerService::Service
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status PlayerService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::PlayerService::Stub
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status ProxyService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::ProxyService::Service
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status ProxyService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::ProxyService::Stub
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status SocialService::Service::Notify(::grpc::ServerContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::SocialService::Service
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::Status SocialService::Stub::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) {$/;"	f	class:ua_blackjack::SocialService::Stub
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void DatabaseService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {$/;"	f	class:ua_blackjack::DatabaseService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void DatabaseService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {$/;"	f	class:ua_blackjack::DatabaseService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void GameService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {$/;"	f	class:ua_blackjack::GameService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void GameService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {$/;"	f	class:ua_blackjack::GameService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void LobbyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {$/;"	f	class:ua_blackjack::LobbyService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void LobbyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {$/;"	f	class:ua_blackjack::LobbyService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void PlayerService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {$/;"	f	class:ua_blackjack::PlayerService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void PlayerService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {$/;"	f	class:ua_blackjack::PlayerService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void ProxyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {$/;"	f	class:ua_blackjack::ProxyService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void ProxyService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {$/;"	f	class:ua_blackjack::ProxyService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void SocialService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {$/;"	f	class:ua_blackjack::SocialService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.cc	/^void SocialService::Stub::experimental_async::Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)> f) {$/;"	f	class:ua_blackjack::SocialService::Stub::experimental_async
Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    virtual ::grpc::ServerUnaryReactor* Notify($/;"	f	class:ua_blackjack::final::ExperimentalWithCallbackMethod_Notify
Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    virtual ::grpc::ServerUnaryReactor* Notify($/;"	f	class:ua_blackjack::final::ExperimentalWithRawCallbackMethod_Notify
OnClientRequest	src/ProxyServer.cc	/^void ProxyServer::OnClientRequest(FileDesc fd, Request &request)$/;"	f	class:ProxyServer
OnClientResponse	include/asyncProxyServer.h	/^    void OnClientResponse(Response &response)$/;"	f	class:final
OnClientResponse	src/ProxyServer.cc	/^void ProxyServer::OnClientResponse(Response &response)$/;"	f	class:ProxyServer
OnConnection	src/TcpServer.cc	/^int TcpServer::OnConnection()$/;"	f	class:TcpServer
OnDisConnection	src/ProxyServer.cc	/^void ProxyServer::OnDisConnection(FileDesc fd)$/;"	f	class:ProxyServer
OnError	src/Client.cc	/^void Client::OnError() {disconnectCallBack_(conn_->SockFd());}$/;"	f	class:Client
OnError	src/ProxyServer.cc	/^void ProxyServer::OnError(FileDesc fd)$/;"	f	class:ProxyServer
OnError	src/TcpConnection.cc	/^int TcpConnection::OnError()$/;"	f	class:TcpConnection
OnError	src/TcpServer.cc	/^int TcpServer::OnError()$/;"	f	class:TcpServer
OnError	test/client.cpp	/^    void OnError() $/;"	f	class:BlackJackClient	file:
OnInput	src/TcpConnection.cc	/^int TcpConnection::OnInput()$/;"	f	class:TcpConnection
OnLeave	src/Client.cc	/^void Client::OnLeave() {errorCallBack_(conn_->SockFd());}$/;"	f	class:Client
OnMessages	src/Client.cc	/^void Client::OnMessages(std::vector<Request> &requests, std::vector<Response> &responses)$/;"	f	class:Client
OnMessages	test/client.cpp	/^    void OnMessages(std::vector<Request> &requests, std::vector<Response> &responses)$/;"	f	class:BlackJackClient	file:
OnNewClient	src/ProxyServer.cc	/^void ProxyServer::OnNewClient(std::shared_ptr<TcpConnection> conn)$/;"	f	class:ProxyServer
OnOutput	src/TcpConnection.cc	/^int TcpConnection::OnOutput()$/;"	f	class:TcpConnection
OnSendReady	include/Client.h	/^    void OnSendReady() {\/*TODO: write requests\/responses buffer to tcp connection*\/;}$/;"	f	class:Client
OnSendReady	test/client.cpp	/^    void OnSendReady() $/;"	f	class:BlackJackClient	file:
OnServiceResponse	src/ProxyServer.cc	/^void ProxyServer::OnServiceResponse(const Response& response)$/;"	f	class:ProxyServer
PACKAGE_HDR_LEN	include/ClientProxyProtocol.h	10;"	d
PROCESS	include/asyncProxyServer.h	/^    enum CallStatus {CREATE, PROCESS, FORWARD, FINISH};$/;"	e	enum:__anon1::CallStatus
PROCESS	test/RpcServer.h	/^    enum CallStatus {CREATE, PROCESS, FINISH};$/;"	e	enum:AsyncCall::CallStatus
PROTOBUF_FINAL	include/grpc/UA_BlackJack.pb.h	/^class Request PROTOBUF_FINAL :$/;"	c	namespace:ua_blackjack
PROTOBUF_FINAL	include/grpc/UA_BlackJack.pb.h	/^class Response PROTOBUF_FINAL :$/;"	c	namespace:ua_blackjack
PROTOBUF_INTERNAL_EXPORT_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.h	37;"	d
Player	include/common.h	/^enum BackEndModule {Proxy = 0, Lobby, Room, Social, Player, DataBase};$/;"	e	enum:BackEndModule
PlayerService_method_names	include/grpc/UA_BlackJack.grpc.pb.cc	/^static const char* PlayerService_method_names[] = {$/;"	m	namespace:ua_blackjack	file:
PrepareAsyncNotify	include/grpc/UA_BlackJack.grpc.pb.h	/^    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>> PrepareAsyncNotify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::final::final
PrepareAsyncNotify	include/grpc/UA_BlackJack.grpc.pb.h	/^    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ua_blackjack::Response>> PrepareAsyncNotify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::final::StubInterface
PrepareAsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* DatabaseService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::DatabaseService::Stub
PrepareAsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* GameService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::GameService::Stub
PrepareAsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* LobbyService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::LobbyService::Stub
PrepareAsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* PlayerService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::PlayerService::Stub
PrepareAsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* ProxyService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::ProxyService::Stub
PrepareAsyncNotifyRaw	include/grpc/UA_BlackJack.grpc.pb.cc	/^::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* SocialService::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) {$/;"	f	class:ua_blackjack::SocialService::Stub
Proceed	test/RpcServer.h	/^    void Proceed()$/;"	f	class:AsyncCall
ProcessCall	include/asyncProxyServer.h	/^    void ProcessCall(AsyncCall *call)$/;"	f	class:final
Proxy	include/common.h	/^enum BackEndModule {Proxy = 0, Lobby, Room, Social, Player, DataBase};$/;"	e	enum:BackEndModule
ProxyRpcServer	include/asyncProxyServer.h	/^    ProxyRpcServer(const std::string &serverAddress,$/;"	f	class:final
ProxyServer	include/ProxyServer.h	/^class ProxyServer {$/;"	c
ProxyServer	src/ProxyServer.cc	/^ProxyServer::ProxyServer(const char *ip, unsigned short port, EventLoop *loop)$/;"	f	class:ProxyServer
ProxyService_method_names	include/grpc/UA_BlackJack.grpc.pb.cc	/^static const char* ProxyService_method_names[] = {$/;"	m	namespace:ua_blackjack	file:
QUEUE_CAPACITY	include/CircularBuffer.h	10;"	d
QUEUE_SIZE	include/ProxyServer.h	17;"	d
QUICK_MATCH	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::QUICK_MATCH;$/;"	m	class:ua_blackjack::Request	file:
QUICK_MATCH	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType QUICK_MATCH =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
RANK_ME	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::RANK_ME;$/;"	m	class:ua_blackjack::Request	file:
RANK_ME	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType RANK_ME =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
RANK_TOP	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::RANK_TOP;$/;"	m	class:ua_blackjack::Request	file:
RANK_TOP	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType RANK_TOP =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
READY	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::READY;$/;"	m	class:ua_blackjack::Request	file:
READY	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType READY =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
REQUEST	include/ClientProxyProtocol.h	/^const int32_t REQUEST = 1;$/;"	v
RESPONSE	include/ClientProxyProtocol.h	/^const int32_t RESPONSE = 2;$/;"	v
ROOM_LIST	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::ROOM_LIST;$/;"	m	class:ua_blackjack::Request	file:
ROOM_LIST	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType ROOM_LIST =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
ReadConfig	src/main.cpp	/^static void ReadConfig(const char *config_path, $/;"	f	file:
RegisterArenaDtor	include/grpc/UA_BlackJack.pb.cc	/^void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:ua_blackjack::Request
RegisterArenaDtor	include/grpc/UA_BlackJack.pb.cc	/^void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:ua_blackjack::Response
RegisterServiceClient	include/ProxyServer.h	/^    void RegisterServiceClient(Request::RequestType requestType, std::shared_ptr<ServiceClient> client)$/;"	f	class:ProxyServer
Request	include/grpc/UA_BlackJack.pb.cc	/^Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)$/;"	f	class:ua_blackjack::Request
Request	include/grpc/UA_BlackJack.pb.cc	/^Request::Request(const Request& from)$/;"	f	class:ua_blackjack::Request
Request	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request::Request($/;"	f	class:ua_blackjack::Request
Request	include/grpc/UA_BlackJack.pb.h	/^    : Request() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
Request	include/grpc/UA_BlackJack.pb.h	/^  inline Request() : Request(nullptr) {}$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
RequestCallBack	test/RpcServer.h	/^    typedef std::function<void(const Request&, Response&)> RequestCallBack;$/;"	t	class:AsyncCall
RequestCallBack	test/RpcServer.h	/^    typedef std::function<void(const Request&, Response&)> RequestCallBack;$/;"	t	class:final
RequestDefaultTypeInternal	include/grpc/UA_BlackJack.pb.cc	/^  constexpr RequestDefaultTypeInternal()$/;"	f	struct:ua_blackjack::RequestDefaultTypeInternal
RequestDefaultTypeInternal	include/grpc/UA_BlackJack.pb.cc	/^struct RequestDefaultTypeInternal {$/;"	s	namespace:ua_blackjack	file:
RequestNotify	include/grpc/UA_BlackJack.grpc.pb.h	/^    void RequestNotify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {$/;"	f	class:ua_blackjack::final::WithRawMethod_Notify
RequestNotify	include/grpc/UA_BlackJack.grpc.pb.h	/^    void RequestNotify(::grpc::ServerContext* context, ::ua_blackjack::Request* request, ::grpc::ServerAsyncResponseWriter< ::ua_blackjack::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {$/;"	f	class:ua_blackjack::final::WithAsyncMethod_Notify
RequestType	include/grpc/UA_BlackJack.pb.h	/^  typedef Request_RequestType RequestType;$/;"	t	class:ua_blackjack::PROTOBUF_FINAL
RequestType_ARRAYSIZE	include/grpc/UA_BlackJack.pb.cc	/^constexpr int Request::RequestType_ARRAYSIZE;$/;"	m	class:ua_blackjack::Request	file:
RequestType_ARRAYSIZE	include/grpc/UA_BlackJack.pb.h	/^  static constexpr int RequestType_ARRAYSIZE =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
RequestType_IsValid	include/grpc/UA_BlackJack.pb.h	/^  static inline bool RequestType_IsValid(int value) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
RequestType_MAX	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::RequestType_MAX;$/;"	m	class:ua_blackjack::Request	file:
RequestType_MAX	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType RequestType_MAX =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
RequestType_MIN	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::RequestType_MIN;$/;"	m	class:ua_blackjack::Request	file:
RequestType_MIN	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType RequestType_MIN =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
RequestType_Name	include/grpc/UA_BlackJack.pb.h	/^  static inline const std::string& RequestType_Name(T enum_t_value) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
RequestType_Parse	include/grpc/UA_BlackJack.pb.h	/^  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
RequestType_descriptor	include/grpc/UA_BlackJack.pb.h	/^  RequestType_descriptor() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
Request_RequestType_IsValid	include/grpc/UA_BlackJack.pb.cc	/^bool Request_RequestType_IsValid(int value) {$/;"	f	namespace:ua_blackjack
Request_RequestType_Name	include/grpc/UA_BlackJack.pb.h	/^inline const std::string& Request_RequestType_Name(T enum_t_value) {$/;"	f	namespace:ua_blackjack
Request_RequestType_Parse	include/grpc/UA_BlackJack.pb.h	/^inline bool Request_RequestType_Parse($/;"	f	namespace:ua_blackjack
Request_RequestType_RequestType_ARRAYSIZE	include/grpc/UA_BlackJack.pb.h	/^constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;$/;"	m	namespace:ua_blackjack
Request_RequestType_RequestType_MAX	include/grpc/UA_BlackJack.pb.h	/^constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_GAME_START;$/;"	m	namespace:ua_blackjack
Request_RequestType_RequestType_MIN	include/grpc/UA_BlackJack.pb.h	/^constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_INVAL;$/;"	m	namespace:ua_blackjack
Request_RequestType_descriptor	include/grpc/UA_BlackJack.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor() {$/;"	f	namespace:ua_blackjack
Response	include/grpc/UA_BlackJack.pb.cc	/^Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)$/;"	f	class:ua_blackjack::Response
Response	include/grpc/UA_BlackJack.pb.cc	/^Response::Response(const Response& from)$/;"	f	class:ua_blackjack::Response
Response	include/grpc/UA_BlackJack.pb.cc	/^constexpr Response::Response($/;"	f	class:ua_blackjack::Response
Response	include/grpc/UA_BlackJack.pb.h	/^    : Response() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
Response	include/grpc/UA_BlackJack.pb.h	/^  inline Response() : Response(nullptr) {}$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
ResponseDefaultTypeInternal	include/grpc/UA_BlackJack.pb.cc	/^  constexpr ResponseDefaultTypeInternal()$/;"	f	struct:ua_blackjack::ResponseDefaultTypeInternal
ResponseDefaultTypeInternal	include/grpc/UA_BlackJack.pb.cc	/^struct ResponseDefaultTypeInternal {$/;"	s	namespace:ua_blackjack	file:
Room	include/common.h	/^enum BackEndModule {Proxy = 0, Lobby, Room, Social, Player, DataBase};$/;"	e	enum:BackEndModule
Run	include/asyncProxyServer.h	/^    void Run() $/;"	f	class:final
Run	test/RpcServer.h	/^    void Run()$/;"	f	class:final
SIGNUP	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::SIGNUP;$/;"	m	class:ua_blackjack::Request	file:
SIGNUP	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType SIGNUP =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
STAND	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::STAND;$/;"	m	class:ua_blackjack::Request	file:
STAND	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType STAND =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
SURRENDER	include/grpc/UA_BlackJack.pb.cc	/^constexpr Request_RequestType Request::SURRENDER;$/;"	m	class:ua_blackjack::Request	file:
SURRENDER	include/grpc/UA_BlackJack.pb.h	/^  static constexpr RequestType SURRENDER =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
Send	src/TcpConnection.cc	/^int TcpConnection::Send(const std::string &pkgsData)$/;"	f	class:TcpConnection
SendRequest	src/Client.cc	/^int Client::SendRequest(const Request &request)$/;"	f	class:Client
SendRequest	src/ProxyServer.cc	/^int ProxyServer::SendRequest(Request &request)$/;"	f	class:ProxyServer
SendResponse	src/Client.cc	/^int Client::SendResponse(const Response &response)$/;"	f	class:Client
Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^DatabaseService::Service::Service() {$/;"	f	class:ua_blackjack::DatabaseService::Service
Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^GameService::Service::Service() {$/;"	f	class:ua_blackjack::GameService::Service
Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^LobbyService::Service::Service() {$/;"	f	class:ua_blackjack::LobbyService::Service
Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^PlayerService::Service::Service() {$/;"	f	class:ua_blackjack::PlayerService::Service
Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^ProxyService::Service::Service() {$/;"	f	class:ua_blackjack::ProxyService::Service
Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^SocialService::Service::Service() {$/;"	f	class:ua_blackjack::SocialService::Service
Service	include/grpc/UA_BlackJack.grpc.pb.h	/^  class Service : public ::grpc::Service {$/;"	c	class:ua_blackjack::final
ServiceClient	include/asyncServiceClient.h	/^    ServiceClient(const std::string &serviceName, $/;"	f	class:ServiceClient
ServiceClient	include/asyncServiceClient.h	/^class ServiceClient$/;"	c
SetCachedSize	include/grpc/UA_BlackJack.pb.cc	/^void Request::SetCachedSize(int size) const {$/;"	f	class:ua_blackjack::Request
SetCachedSize	include/grpc/UA_BlackJack.pb.cc	/^void Response::SetCachedSize(int size) const {$/;"	f	class:ua_blackjack::Response
SetClientResponseCallBack	include/ProxyServer.h	/^    void SetClientResponseCallBack(const std::function<void(Response &)> &clientResponseCallBack)$/;"	f	class:ProxyServer
SetErrorCallBack	include/TcpConnection.h	/^    void SetErrorCallBack(const std::function<void()> &cb) {errorCallBack_ = cb;}$/;"	f	class:Net::TcpConnection
SetHupCallBack	include/TcpConnection.h	/^    void SetHupCallBack(const std::function<void()> &cb) {hupCallBack_ = cb;}$/;"	f	class:Net::TcpConnection
SetInputCallBack	include/TcpConnection.h	/^    void SetInputCallBack(const std::function<void(std::vector<Request>&, std::vector<Response>&)> &cb) {inputCallBack_ = cb;}$/;"	f	class:Net::TcpConnection
SetMessageAllocatorFor_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    void SetMessageAllocatorFor_Notify($/;"	f	class:ua_blackjack::final::ExperimentalWithCallbackMethod_Notify
SetOutPutCallBack	include/TcpConnection.h	/^    void SetOutPutCallBack(const std::function<void()> &cb) {outputCallBack_ = cb;}$/;"	f	class:Net::TcpConnection
SetRequests	test/client.cpp	/^    void SetRequests(const std::queue<Request> &requests) {requests_ = requests;}$/;"	f	class:BlackJackClient
SetResponseCallBack	include/asyncServiceClient.h	/^    void SetResponseCallBack(const std::function<void(const Response&)> &cb) {responseCallBack_ = cb;}$/;"	f	class:ServiceClient
SetSignupStamp	include/Client.h	/^    void SetSignupStamp(int64_t stamp) {signupStamp_ = stamp;}$/;"	f	class:Client
SetUid	include/Client.h	/^    void SetUid(UserId id) {uid_ = id;}$/;"	f	class:Client
SetUnloginStamp	include/Client.h	/^    void SetUnloginStamp(int64_t stamp) {unloginStamp_ = stamp;}$/;"	f	class:Client
SharedCtor	include/grpc/UA_BlackJack.pb.cc	/^void Request::SharedCtor() {$/;"	f	class:ua_blackjack::Request
SharedCtor	include/grpc/UA_BlackJack.pb.cc	/^void Response::SharedCtor() {$/;"	f	class:ua_blackjack::Response
SharedDtor	include/grpc/UA_BlackJack.pb.cc	/^void Request::SharedDtor() {$/;"	f	class:ua_blackjack::Request
SharedDtor	include/grpc/UA_BlackJack.pb.cc	/^void Response::SharedDtor() {$/;"	f	class:ua_blackjack::Response
Social	include/common.h	/^enum BackEndModule {Proxy = 0, Lobby, Room, Social, Player, DataBase};$/;"	e	enum:BackEndModule
SocialService_method_names	include/grpc/UA_BlackJack.grpc.pb.cc	/^static const char* SocialService_method_names[] = {$/;"	m	namespace:ua_blackjack	file:
SockFd	src/TcpConnection.cc	/^int TcpConnection::SockFd() const {return eventsSource_->fd();}$/;"	f	class:TcpConnection
SplitStreamedService	include/grpc/UA_BlackJack.grpc.pb.h	/^  typedef Service SplitStreamedService;$/;"	t	class:ua_blackjack::final
Stop	include/asyncProxyServer.h	/^    void Stop() {stop_ = true;}$/;"	f	class:final
Stop	test/RpcServer.h	/^    void Stop() {flag_ = true;}$/;"	f	class:final
StopClient	include/asyncServiceClient.h	/^    void StopClient() {stop_ = true;}$/;"	f	class:ServiceClient
StreamedService	include/grpc/UA_BlackJack.grpc.pb.h	/^  typedef WithStreamedUnaryMethod_Notify<Service > StreamedService;$/;"	t	class:ua_blackjack::final
StreamedUnaryService	include/grpc/UA_BlackJack.grpc.pb.h	/^  typedef WithStreamedUnaryMethod_Notify<Service > StreamedUnaryService;$/;"	t	class:ua_blackjack::final
Stub	include/grpc/UA_BlackJack.grpc.pb.cc	/^DatabaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)$/;"	f	class:ua_blackjack::DatabaseService::Stub
Stub	include/grpc/UA_BlackJack.grpc.pb.cc	/^GameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)$/;"	f	class:ua_blackjack::GameService::Stub
Stub	include/grpc/UA_BlackJack.grpc.pb.cc	/^LobbyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)$/;"	f	class:ua_blackjack::LobbyService::Stub
Stub	include/grpc/UA_BlackJack.grpc.pb.cc	/^PlayerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)$/;"	f	class:ua_blackjack::PlayerService::Stub
Stub	include/grpc/UA_BlackJack.grpc.pb.cc	/^ProxyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)$/;"	f	class:ua_blackjack::ProxyService::Stub
Stub	include/grpc/UA_BlackJack.grpc.pb.cc	/^SocialService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)$/;"	f	class:ua_blackjack::SocialService::Stub
StubInterface	include/grpc/UA_BlackJack.grpc.pb.h	/^  class StubInterface {$/;"	c	class:ua_blackjack::final
Swap	include/grpc/UA_BlackJack.pb.h	/^  inline void Swap(Request* other) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
Swap	include/grpc/UA_BlackJack.pb.h	/^  inline void Swap(Response* other) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
TableStruct_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.h	/^struct TableStruct_UA_5fBlackJack_2eproto {$/;"	s
TcpConnection	include/TcpConnection.h	/^class TcpConnection$/;"	c	namespace:Net
TcpConnection	src/TcpConnection.cc	/^TcpConnection::TcpConnection(FileDesc connfd, $/;"	f	class:TcpConnection
TcpConnection	src/TcpConnection.cc	/^TcpConnection::TcpConnection(const char *ip, $/;"	f	class:TcpConnection
TcpServer	include/TcpServer.h	/^class TcpServer$/;"	c	namespace:Net
TcpServer	src/TcpServer.cc	/^TcpServer::TcpServer(const char *ip, $/;"	f	class:TcpServer
UnsafeArenaSwap	include/grpc/UA_BlackJack.pb.h	/^  void UnsafeArenaSwap(Request* other) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
UnsafeArenaSwap	include/grpc/UA_BlackJack.pb.h	/^  void UnsafeArenaSwap(Response* other) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
UserId	include/common.h	/^typedef int64_t UserId;$/;"	t
WithAsyncMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    WithAsyncMethod_Notify() {$/;"	f	class:ua_blackjack::final::WithAsyncMethod_Notify
WithAsyncMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^  class WithAsyncMethod_Notify : public BaseClass {$/;"	c	class:ua_blackjack::final
WithGenericMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    WithGenericMethod_Notify() {$/;"	f	class:ua_blackjack::final::WithGenericMethod_Notify
WithGenericMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^  class WithGenericMethod_Notify : public BaseClass {$/;"	c	class:ua_blackjack::final
WithRawMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    WithRawMethod_Notify() {$/;"	f	class:ua_blackjack::final::WithRawMethod_Notify
WithRawMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^  class WithRawMethod_Notify : public BaseClass {$/;"	c	class:ua_blackjack::final
WithStreamedUnaryMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^    WithStreamedUnaryMethod_Notify() {$/;"	f	class:ua_blackjack::final::WithStreamedUnaryMethod_Notify
WithStreamedUnaryMethod_Notify	include/grpc/UA_BlackJack.grpc.pb.h	/^  class WithStreamedUnaryMethod_Notify : public BaseClass {$/;"	c	class:ua_blackjack::final
_ASYNCPROXYSERVER_H_	include/asyncProxyServer.h	2;"	d
_ASYNCSERVICECALIENT_H_	include/asyncServiceClient.h	2;"	d
_CIRC_BUF_H_	include/CircularBuffer.h	2;"	d
_CLIENTPROXYPROTOCOL_H_	include/ClientProxyProtocol.h	2;"	d
_CLIENT_H_	include/Client.h	2;"	d
_COMMON_H_	include/common.h	2;"	d
_EVENTLOOP_H_	include/EventLoop.h	2;"	d
_Internal	include/grpc/UA_BlackJack.pb.cc	/^class Request::_Internal {$/;"	c	class:ua_blackjack::Request	file:
_Internal	include/grpc/UA_BlackJack.pb.cc	/^class Response::_Internal {$/;"	c	class:ua_blackjack::Response	file:
_InternalParse	include/grpc/UA_BlackJack.pb.cc	/^const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {$/;"	f	class:ua_blackjack::Request
_InternalParse	include/grpc/UA_BlackJack.pb.cc	/^const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {$/;"	f	class:ua_blackjack::Response
_InternalSerialize	include/grpc/UA_BlackJack.pb.cc	/^::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize($/;"	f	class:ua_blackjack::Request
_InternalSerialize	include/grpc/UA_BlackJack.pb.cc	/^::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize($/;"	f	class:ua_blackjack::Response
_LOG_H_	include/log.h	2;"	d
_PROXYSERVER_H_	include/ProxyServer.h	2;"	d
_RPCSERVER_H_	test/RpcServer.h	2;"	d
_Request_default_instance_	include/grpc/UA_BlackJack.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;$/;"	m	namespace:ua_blackjack	file:
_Response_default_instance_	include/grpc/UA_BlackJack.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;$/;"	m	namespace:ua_blackjack	file:
_TCPCONNECTION_H_	include/TcpConnection.h	2;"	d
_TCPSERVER_H_	include/TcpServer.h	2;"	d
_cached_size_	include/grpc/UA_BlackJack.pb.h	/^  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
_has_bits_	include/grpc/UA_BlackJack.pb.h	/^  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
_instance	include/grpc/UA_BlackJack.pb.cc	/^    Request _instance;$/;"	m	union:ua_blackjack::RequestDefaultTypeInternal::__anon2	file:
_instance	include/grpc/UA_BlackJack.pb.cc	/^    Response _instance;$/;"	m	union:ua_blackjack::ResponseDefaultTypeInternal::__anon3	file:
_internal_add_args	include/grpc/UA_BlackJack.pb.h	/^inline std::string* Request::_internal_add_args() {$/;"	f	class:ua_blackjack::Request
_internal_add_args	include/grpc/UA_BlackJack.pb.h	/^inline std::string* Response::_internal_add_args() {$/;"	f	class:ua_blackjack::Response
_internal_args	include/grpc/UA_BlackJack.pb.h	/^inline const std::string& Request::_internal_args(int index) const {$/;"	f	class:ua_blackjack::Request
_internal_args	include/grpc/UA_BlackJack.pb.h	/^inline const std::string& Response::_internal_args(int index) const {$/;"	f	class:ua_blackjack::Response
_internal_args_size	include/grpc/UA_BlackJack.pb.h	/^inline int Request::_internal_args_size() const {$/;"	f	class:ua_blackjack::Request
_internal_args_size	include/grpc/UA_BlackJack.pb.h	/^inline int Response::_internal_args_size() const {$/;"	f	class:ua_blackjack::Response
_internal_has_requesttype	include/grpc/UA_BlackJack.pb.h	/^inline bool Request::_internal_has_requesttype() const {$/;"	f	class:ua_blackjack::Request
_internal_has_stamp	include/grpc/UA_BlackJack.pb.h	/^inline bool Request::_internal_has_stamp() const {$/;"	f	class:ua_blackjack::Request
_internal_has_stamp	include/grpc/UA_BlackJack.pb.h	/^inline bool Response::_internal_has_stamp() const {$/;"	f	class:ua_blackjack::Response
_internal_has_status	include/grpc/UA_BlackJack.pb.h	/^inline bool Response::_internal_has_status() const {$/;"	f	class:ua_blackjack::Response
_internal_has_uid	include/grpc/UA_BlackJack.pb.h	/^inline bool Request::_internal_has_uid() const {$/;"	f	class:ua_blackjack::Request
_internal_has_uid	include/grpc/UA_BlackJack.pb.h	/^inline bool Response::_internal_has_uid() const {$/;"	f	class:ua_blackjack::Response
_internal_requesttype	include/grpc/UA_BlackJack.pb.h	/^inline ::ua_blackjack::Request_RequestType Request::_internal_requesttype() const {$/;"	f	class:ua_blackjack::Request
_internal_set_requesttype	include/grpc/UA_BlackJack.pb.h	/^inline void Request::_internal_set_requesttype(::ua_blackjack::Request_RequestType value) {$/;"	f	class:ua_blackjack::Request
_internal_set_stamp	include/grpc/UA_BlackJack.pb.h	/^inline void Request::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Request
_internal_set_stamp	include/grpc/UA_BlackJack.pb.h	/^inline void Response::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Response
_internal_set_status	include/grpc/UA_BlackJack.pb.h	/^inline void Response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Response
_internal_set_uid	include/grpc/UA_BlackJack.pb.h	/^inline void Request::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Request
_internal_set_uid	include/grpc/UA_BlackJack.pb.h	/^inline void Response::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Response
_internal_stamp	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_stamp() const {$/;"	f	class:ua_blackjack::Request
_internal_stamp	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Response::_internal_stamp() const {$/;"	f	class:ua_blackjack::Response
_internal_status	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Response::_internal_status() const {$/;"	f	class:ua_blackjack::Response
_internal_uid	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_uid() const {$/;"	f	class:ua_blackjack::Request
_internal_uid	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Response::_internal_uid() const {$/;"	f	class:ua_blackjack::Response
add	src/EventLoop.cc	/^int Net::EventLoop::add(std::shared_ptr<EventsSource> evsSource)$/;"	f	class:Net::EventLoop
add_args	include/grpc/UA_BlackJack.pb.h	/^inline std::string* Request::add_args() {$/;"	f	class:ua_blackjack::Request
add_args	include/grpc/UA_BlackJack.pb.h	/^inline std::string* Response::add_args() {$/;"	f	class:ua_blackjack::Response
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::add_args(const char* value) {$/;"	f	class:ua_blackjack::Request
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::add_args(const char* value, size_t size) {$/;"	f	class:ua_blackjack::Request
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::add_args(const std::string& value) {$/;"	f	class:ua_blackjack::Request
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::add_args(std::string&& value) {$/;"	f	class:ua_blackjack::Request
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::add_args(const char* value) {$/;"	f	class:ua_blackjack::Response
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::add_args(const char* value, size_t size) {$/;"	f	class:ua_blackjack::Response
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::add_args(const std::string& value) {$/;"	f	class:ua_blackjack::Response
add_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::add_args(std::string&& value) {$/;"	f	class:ua_blackjack::Response
addr_	include/TcpConnection.h	/^    struct sockaddr_in addr_;$/;"	m	class:Net::TcpConnection	typeref:struct:Net::TcpConnection::sockaddr_in
addr_	include/TcpServer.h	/^    struct sockaddr_in addr_;$/;"	m	class:Net::TcpServer	typeref:struct:Net::TcpServer::sockaddr_in
args	include/grpc/UA_BlackJack.pb.h	/^Request::args() const {$/;"	f	class:ua_blackjack::Request
args	include/grpc/UA_BlackJack.pb.h	/^Response::args() const {$/;"	f	class:ua_blackjack::Response
args	include/grpc/UA_BlackJack.pb.h	/^inline const std::string& Request::args(int index) const {$/;"	f	class:ua_blackjack::Request
args	include/grpc/UA_BlackJack.pb.h	/^inline const std::string& Response::args(int index) const {$/;"	f	class:ua_blackjack::Response
args_	include/grpc/UA_BlackJack.pb.h	/^  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
args_size	include/grpc/UA_BlackJack.pb.h	/^inline int Request::args_size() const {$/;"	f	class:ua_blackjack::Request
args_size	include/grpc/UA_BlackJack.pb.h	/^inline int Response::args_size() const {$/;"	f	class:ua_blackjack::Response
async	include/grpc/UA_BlackJack.grpc.pb.h	/^    async_interface* async() { return experimental_async(); }$/;"	f	class:ua_blackjack::final::StubInterface
asyncCallsLock_	include/asyncServiceClient.h	/^    std::mutex asyncCallsLock_;$/;"	m	class:ServiceClient
asyncCalls_	include/asyncServiceClient.h	/^    std::unordered_map<int64_t, std::shared_ptr<AsyncClientCall>> asyncCalls_;$/;"	m	class:ServiceClient
async_interface	include/grpc/UA_BlackJack.grpc.pb.h	/^    typedef class experimental_async_interface async_interface;$/;"	t	class:ua_blackjack::final::StubInterface	typeref:class:ua_blackjack::final::StubInterface::experimental_async_interface
async_stub_	include/grpc/UA_BlackJack.grpc.pb.h	/^    class experimental_async async_stub_{this};$/;"	c	class:ua_blackjack::final::final
bufferSize_	include/TcpConnection.h	/^    static const int bufferSize_ = 4096;$/;"	m	class:Net::TcpConnection
callQueueLock_	include/asyncServiceClient.h	/^    std::mutex callQueueLock_;$/;"	m	class:ServiceClient
callQueue_	include/asyncServiceClient.h	/^    std::queue<std::shared_ptr<AsyncClientCall>> callQueue_;$/;"	m	class:ServiceClient
callTime	include/asyncServiceClient.h	/^        time_point callTime;$/;"	m	struct:ServiceClient::AsyncClientCall
capacity	include/CircularBuffer.h	/^    int capacity() const {return m_bufferSize;}$/;"	f	struct:Net::CircularBuffer
cb_	test/RpcServer.h	/^    RequestCallBack cb_;$/;"	m	class:AsyncCall
cb_	test/RpcServer.h	/^    RequestCallBack cb_;$/;"	m	class:final
channel_	include/grpc/UA_BlackJack.grpc.pb.h	/^    std::shared_ptr< ::grpc::ChannelInterface> channel_;$/;"	m	class:ua_blackjack::final::final
circBuffer	include/CircularBuffer.h	/^    CircularBuffer &operator=(const CircularBuffer &circBuffer) = delete;$/;"	m	struct:Net::CircularBuffer
circularBufferToString	src/CircularBuffer.cc	/^void Net::circularBufferToString(const CircularBuffer &buffer, size_t length, ::std::string &str)$/;"	f	class:Net
clear_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::clear_args() {$/;"	f	class:ua_blackjack::Request
clear_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::clear_args() {$/;"	f	class:ua_blackjack::Response
clear_requesttype	include/grpc/UA_BlackJack.pb.h	/^inline void Request::clear_requesttype() {$/;"	f	class:ua_blackjack::Request
clear_stamp	include/grpc/UA_BlackJack.pb.h	/^inline void Request::clear_stamp() {$/;"	f	class:ua_blackjack::Request
clear_stamp	include/grpc/UA_BlackJack.pb.h	/^inline void Response::clear_stamp() {$/;"	f	class:ua_blackjack::Response
clear_status	include/grpc/UA_BlackJack.pb.h	/^inline void Response::clear_status() {$/;"	f	class:ua_blackjack::Response
clear_uid	include/grpc/UA_BlackJack.pb.h	/^inline void Request::clear_uid() {$/;"	f	class:ua_blackjack::Request
clear_uid	include/grpc/UA_BlackJack.pb.h	/^inline void Response::clear_uid() {$/;"	f	class:ua_blackjack::Response
clientResponseCallBack_	include/ProxyServer.h	/^    std::function<void(Response &)> clientResponseCallBack_;$/;"	m	class:ProxyServer
closeEventCallBack_	include/EventLoop.h	/^    std::function<int()> closeEventCallBack_;$/;"	m	class:Net::EventsSource
connLock_	include/Client.h	/^    std::mutex connLock_;$/;"	m	class:Client
conn_	include/Client.h	/^    std::shared_ptr<TcpConnection> conn_;$/;"	m	class:Client
conn_	test/client.cpp	/^    TcpConnection conn_;$/;"	m	class:BlackJackClient	file:
connectionCallBack_	include/TcpServer.h	/^    std::function<void(std::shared_ptr<TcpConnection>)> connectionCallBack_;$/;"	m	class:Net::TcpServer
context	include/asyncServiceClient.h	/^        ClientContext context;$/;"	m	struct:ServiceClient::AsyncClientCall
cq_	include/asyncProxyServer.h	/^    std::unique_ptr<ServerCompletionQueue> cq_;$/;"	m	class:final
cq_	include/asyncServiceClient.h	/^    CompletionQueue cq_;$/;"	m	class:ServiceClient
cq_	test/RpcServer.h	/^    ServerCompletionQueue *cq_;$/;"	m	class:AsyncCall
cq_	test/RpcServer.h	/^    std::unique_ptr<ServerCompletionQueue> cq_;$/;"	m	class:final
createTime_	test/client.cpp	/^    time_point createTime_;$/;"	m	class:BlackJackClient	file:
create_logger	include/log.h	23;"	d
ctx_	include/asyncProxyServer.h	/^    ServerContext ctx_;$/;"	m	struct:AsyncCall
ctx_	test/RpcServer.h	/^    ServerContext ctx_;$/;"	m	class:AsyncCall
default_instance	include/grpc/UA_BlackJack.pb.h	/^  static const Request& default_instance() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
default_instance	include/grpc/UA_BlackJack.pb.h	/^  static const Response& default_instance() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
del	src/EventLoop.cc	/^int Net::EventLoop::del(std::shared_ptr<EventsSource> evsSource)$/;"	f	class:Net::EventLoop
descriptor	include/grpc/UA_BlackJack.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
descriptor_table_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.cc	/^PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_UA_5fBlackJack_2eproto(&descriptor_table_UA_5fBlackJack_2eproto);$/;"	v	file:
descriptor_table_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UA_5fBlackJack_2eproto = {$/;"	v
descriptor_table_UA_5fBlackJack_2eproto_metadata_getter	include/grpc/UA_BlackJack.pb.cc	/^descriptor_table_UA_5fBlackJack_2eproto_metadata_getter(int index) {$/;"	f
descriptor_table_UA_5fBlackJack_2eproto_once	include/grpc/UA_BlackJack.pb.cc	/^static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UA_5fBlackJack_2eproto_once;$/;"	v	file:
disconnectCallBack_	include/Client.h	/^    std::function<void(FileDesc)> disconnectCallBack_;$/;"	m	class:Client
empty	include/CircularBuffer.h	/^    bool empty() const {return m_tail == -1;}$/;"	f	struct:Net::CircularBuffer
epollfd_	include/EventLoop.h	/^    int epollfd_ = -1;$/;"	m	class:Net::EventLoop
errEventCallBack_	include/EventLoop.h	/^    std::function<int()> errEventCallBack_;$/;"	m	class:Net::EventsSource
errorCallBack_	include/Client.h	/^    std::function<void(FileDesc)> errorCallBack_;$/;"	m	class:Client
errorCallBack_	include/TcpConnection.h	/^    std::function<void()> errorCallBack_;$/;"	m	class:Net::TcpConnection
errorCallBack_	include/TcpServer.h	/^    std::function<void(FileDesc)> errorCallBack_;$/;"	m	class:Net::TcpServer
eventsCnt_	include/EventLoop.h	/^    int eventsCnt_ = 0;$/;"	m	class:Net::EventLoop
eventsSource_	include/TcpConnection.h	/^    std::shared_ptr<EventsSource> eventsSource_;$/;"	m	class:Net::TcpConnection
eventsSource_	include/TcpServer.h	/^    std::shared_ptr<EventsSource> eventsSource_;$/;"	m	class:Net::TcpServer
events_	include/EventLoop.h	/^    Net::Event events_ = 0;$/;"	m	class:Net::EventsSource
events_	include/EventLoop.h	/^    struct epoll_event *events_ = NULL;$/;"	m	class:Net::EventLoop	typeref:struct:Net::EventLoop::epoll_event
experimental_async	include/grpc/UA_BlackJack.grpc.pb.h	/^      explicit experimental_async(Stub* stub): stub_(stub) { }$/;"	f	class:ua_blackjack::final::final::final
experimental_async	include/grpc/UA_BlackJack.grpc.pb.h	/^    virtual class experimental_async_interface* experimental_async() { return nullptr; }$/;"	f	class:ua_blackjack::final::StubInterface
experimental_async_interface	include/grpc/UA_BlackJack.grpc.pb.h	/^    class experimental_async_interface {$/;"	c	class:ua_blackjack::final::StubInterface
expiredTime	include/asyncServiceClient.h	/^        time_point expiredTime;$/;"	m	struct:ServiceClient::AsyncClientCall
fd	src/EventLoop.cc	/^FileDesc EventsSource::fd() const $/;"	f	class:EventsSource
fdToClient_	include/ProxyServer.h	/^    std::unordered_map<FileDesc, std::shared_ptr<Client>> fdToClient_;  \/\/ only accessible from the main thread, no lock protected$/;"	m	class:ProxyServer
fdToEventsSource_	include/EventLoop.h	/^    std::unordered_map<FileDesc, std::shared_ptr<EventsSource>> fdToEventsSource_;$/;"	m	class:Net::EventLoop
fd_	include/EventLoop.h	/^    FileDesc fd_;$/;"	m	class:Net::EventsSource
field_metadata	include/grpc/UA_BlackJack.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];$/;"	m	struct:TableStruct_UA_5fBlackJack_2eproto
file_default_instances	include/grpc/UA_BlackJack.pb.cc	/^static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {$/;"	m	class:PROTOBUF_NAMESPACE_ID	file:
file_level_enum_descriptors_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.cc	/^static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_UA_5fBlackJack_2eproto[1];$/;"	v	file:
file_level_metadata_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.cc	/^static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UA_5fBlackJack_2eproto[2];$/;"	v	file:
file_level_service_descriptors_UA_5fBlackJack_2eproto	include/grpc/UA_BlackJack.pb.cc	/^static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UA_5fBlackJack_2eproto = nullptr;$/;"	m	class:constexpr::PROTOBUF_NAMESPACE_ID	file:
final	include/asyncProxyServer.h	/^class ProxyRpcServer final {$/;"	c
final	include/grpc/UA_BlackJack.grpc.pb.h	/^    class experimental_async final :$/;"	c	class:ua_blackjack::final::final
final	include/grpc/UA_BlackJack.grpc.pb.h	/^  class Stub final : public StubInterface {$/;"	c	class:ua_blackjack::final
final	include/grpc/UA_BlackJack.grpc.pb.h	/^class DatabaseService final {$/;"	c	namespace:ua_blackjack
final	include/grpc/UA_BlackJack.grpc.pb.h	/^class GameService final {$/;"	c	namespace:ua_blackjack
final	include/grpc/UA_BlackJack.grpc.pb.h	/^class LobbyService final {$/;"	c	namespace:ua_blackjack
final	include/grpc/UA_BlackJack.grpc.pb.h	/^class PlayerService final {$/;"	c	namespace:ua_blackjack
final	include/grpc/UA_BlackJack.grpc.pb.h	/^class ProxyService final {$/;"	c	namespace:ua_blackjack
final	include/grpc/UA_BlackJack.grpc.pb.h	/^class SocialService final {$/;"	c	namespace:ua_blackjack
final	include/grpc/UA_BlackJack.pb.h	/^      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  bool IsInitialized() const final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  size_t ByteSizeLong() const final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	include/grpc/UA_BlackJack.pb.h	/^  void SetCachedSize(int size) const final;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
final	test/RpcServer.h	/^class AsyncRpcServer final {$/;"	c
flag	test/client.cpp	/^bool flag = false;$/;"	v
flag	test/simpleBackEnd.cpp	/^bool flag = false;$/;"	v
flag_	test/RpcServer.h	/^    bool flag_ = false;$/;"	m	class:final
free	include/CircularBuffer.h	/^    void free(int nbytes) $/;"	f	struct:Net::CircularBuffer
front	include/CircularBuffer.h	/^    int front(T &item)$/;"	f	class:Net::CircularQueue
g_log_path	src/log.cc	/^std::string g_log_path;$/;"	v
g_logger_name	src/log.cc	/^std::string g_logger_name;$/;"	v
get	src/CircularBuffer.cc	/^int Net::get(CircularBuffer &buffer, char *dst, size_t n)$/;"	f	class:Net
has_requesttype	include/grpc/UA_BlackJack.pb.h	/^inline bool Request::has_requesttype() const {$/;"	f	class:ua_blackjack::Request
has_stamp	include/grpc/UA_BlackJack.pb.h	/^inline bool Request::has_stamp() const {$/;"	f	class:ua_blackjack::Request
has_stamp	include/grpc/UA_BlackJack.pb.h	/^inline bool Response::has_stamp() const {$/;"	f	class:ua_blackjack::Response
has_status	include/grpc/UA_BlackJack.pb.h	/^inline bool Response::has_status() const {$/;"	f	class:ua_blackjack::Response
has_uid	include/grpc/UA_BlackJack.pb.h	/^inline bool Request::has_uid() const {$/;"	f	class:ua_blackjack::Request
has_uid	include/grpc/UA_BlackJack.pb.h	/^inline bool Response::has_uid() const {$/;"	f	class:ua_blackjack::Response
hupCallBack_	include/TcpConnection.h	/^    std::function<void()> hupCallBack_;$/;"	m	class:Net::TcpConnection
inEventCallBack_	include/EventLoop.h	/^    std::function<int()> inEventCallBack_;$/;"	m	class:Net::EventsSource
inputCallBack_	include/TcpConnection.h	/^    std::function<void(std::vector<Request>&, std::vector<Response>&)> inputCallBack_;$/;"	m	class:Net::TcpConnection
internal	include/grpc/UA_BlackJack.pb.h	/^namespace internal {$/;"	n
internal_default_instance	include/grpc/UA_BlackJack.pb.h	/^  static inline const Request* internal_default_instance() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
internal_default_instance	include/grpc/UA_BlackJack.pb.h	/^  static inline const Response* internal_default_instance() {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
is_proto_enum	include/grpc/UA_BlackJack.pb.h	/^template <> struct is_proto_enum< ::ua_blackjack::Request_RequestType> : ::std::true_type {};$/;"	s
kIndexInFileMessages	include/grpc/UA_BlackJack.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
logger_flush_on	include/log.h	21;"	d
logger_ptr	include/log.h	26;"	d
loopOnce	src/EventLoop.cc	/^int Net::EventLoop::loopOnce(int timeout)$/;"	f	class:Net::EventLoop
loop_	include/EventLoop.h	/^    EventLoop *loop_;$/;"	m	class:Net::EventsSource
loop_	include/TcpServer.h	/^    EventLoop *loop_;$/;"	m	class:Net::TcpServer
m_buffer	include/CircularBuffer.h	/^    T* m_buffer;$/;"	m	class:Net::CircularQueue
m_buffer	include/CircularBuffer.h	/^    char *m_buffer;$/;"	m	struct:Net::CircularBuffer
m_bufferSize	include/CircularBuffer.h	/^    const int m_bufferSize;$/;"	m	struct:Net::CircularBuffer
m_capacity	include/CircularBuffer.h	/^    const size_t m_capacity;$/;"	m	class:Net::CircularQueue
m_head	include/CircularBuffer.h	/^    int m_head;$/;"	m	class:Net::CircularQueue
m_head	include/CircularBuffer.h	/^    int m_head;$/;"	m	struct:Net::CircularBuffer
m_tail	include/CircularBuffer.h	/^    int m_tail;$/;"	m	class:Net::CircularQueue
m_tail	include/CircularBuffer.h	/^    int m_tail;$/;"	m	struct:Net::CircularBuffer
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/client.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/simpleBackEnd.cpp	/^int main(int argc, char **argv)$/;"	f
maxEvents_	include/EventLoop.h	/^    const int maxEvents_;$/;"	m	class:Net::EventLoop
mod	src/EventLoop.cc	/^int Net::EventLoop::mod(std::shared_ptr<EventsSource> evsSource)$/;"	f	class:Net::EventLoop
mutable_args	include/grpc/UA_BlackJack.pb.h	/^Request::mutable_args() {$/;"	f	class:ua_blackjack::Request
mutable_args	include/grpc/UA_BlackJack.pb.h	/^Response::mutable_args() {$/;"	f	class:ua_blackjack::Response
mutable_args	include/grpc/UA_BlackJack.pb.h	/^inline std::string* Request::mutable_args(int index) {$/;"	f	class:ua_blackjack::Request
mutable_args	include/grpc/UA_BlackJack.pb.h	/^inline std::string* Response::mutable_args(int index) {$/;"	f	class:ua_blackjack::Response
objId_	test/client.cpp	/^    int64_t objId_ = 0;$/;"	m	class:BlackJackClient	file:
offsets	include/grpc/UA_BlackJack.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];$/;"	m	struct:TableStruct_UA_5fBlackJack_2eproto
operator =	include/grpc/UA_BlackJack.pb.h	/^  inline Request& operator=(const Request& from) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
operator =	include/grpc/UA_BlackJack.pb.h	/^  inline Response& operator=(const Response& from) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
outEventCallBack_	include/EventLoop.h	/^    std::function<int()> outEventCallBack_;$/;"	m	class:Net::EventsSource
out_events_	include/EventLoop.h	/^    Net::Event out_events_;$/;"	m	class:Net::EventsSource
outputCallBack_	include/TcpConnection.h	/^    std::function<void()> outputCallBack_;$/;"	m	class:Net::TcpConnection
override	include/grpc/UA_BlackJack.grpc.pb.h	/^      void Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::ClientUnaryReactor* reactor) override;$/;"	m	class:ua_blackjack::final::final::final
override	include/grpc/UA_BlackJack.grpc.pb.h	/^      void Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;$/;"	m	class:ua_blackjack::final::final::final
override	include/grpc/UA_BlackJack.grpc.pb.h	/^      void Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request* request, ::ua_blackjack::Response* response, std::function<void(::grpc::Status)>) override;$/;"	m	class:ua_blackjack::final::final::final
override	include/grpc/UA_BlackJack.grpc.pb.h	/^    ::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* AsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) override;$/;"	m	class:ua_blackjack::final::final
override	include/grpc/UA_BlackJack.grpc.pb.h	/^    ::grpc::ClientAsyncResponseReader< ::ua_blackjack::Response>* PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::grpc::CompletionQueue* cq) override;$/;"	m	class:ua_blackjack::final::final
override	include/grpc/UA_BlackJack.grpc.pb.h	/^    ::grpc::Status Notify(::grpc::ClientContext* context, const ::ua_blackjack::Request& request, ::ua_blackjack::Response* response) override;$/;"	m	class:ua_blackjack::final::final
pack	src/ClientProxyProtocol.cc	/^int NS::pack(int32_t type,  $/;"	f	class:NS
parseFile	test/client.cpp	/^void parseFile(const char *filepath, std::queue<Request> &res)$/;"	f
path_to_pid_file	src/main.cpp	/^const char *path_to_pid_file = "\/tmp\/ua_blackjack\/proxy.pid";$/;"	v
playerAddress	test/simpleBackEnd.cpp	/^std::string playerAddress = "localhost:50054";$/;"	v
pop	include/CircularBuffer.h	/^    void pop()$/;"	f	class:Net::CircularQueue
print	src/ProxyServer.cc	/^void print(std::ostream &os, Net::Event events)$/;"	f
print	src/ProxyServer.cc	/^void print(std::ostream &os, const Request &request)$/;"	f
print	src/ProxyServer.cc	/^void print(std::ostream &os, const Response &response)$/;"	f
protodesc_cold	include/grpc/UA_BlackJack.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UA_5fBlackJack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {$/;"	v
protodesc_cold	include/grpc/UA_BlackJack.pb.cc	/^const char descriptor_table_protodef_UA_5fBlackJack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =$/;"	v
protodesc_cold	include/grpc/UA_BlackJack.pb.cc	/^static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {$/;"	v	file:
proxy_	include/asyncProxyServer.h	/^    std::weak_ptr<ProxyServer> proxy_;$/;"	m	class:final
push	include/CircularBuffer.h	/^    int push(const T &item)$/;"	f	class:Net::CircularQueue
put	src/CircularBuffer.cc	/^int Net::put(CircularBuffer &buffer, const char *src, size_t n)$/;"	f	class:Net
read	src/CircularBuffer.cc	/^int Net::read(int fd, CircularBuffer &buffer)$/;"	f	class:Net
readAs	include/CircularBuffer.h	/^int readAs(const CircularBuffer &buffer, size_t off, T &out, bool netByteOrder = false)$/;"	f	namespace:Net
readBuffer_	include/TcpConnection.h	/^    CircularBuffer readBuffer_;$/;"	m	class:Net::TcpConnection
readBuffer_	test/client.cpp	/^    CircularBuffer readBuffer_;$/;"	m	class:BlackJackClient	file:
reply	include/asyncServiceClient.h	/^        Response reply;$/;"	m	struct:ServiceClient::AsyncClientCall
reply_	include/asyncProxyServer.h	/^    Response reply_;$/;"	m	struct:AsyncCall
request	include/asyncServiceClient.h	/^        Request request;$/;"	m	struct:ServiceClient::AsyncClientCall
requestCallBack_	include/Client.h	/^    std::function<void(FileDesc, Request &)> requestCallBack_;$/;"	m	class:Client
requestCnt_	include/asyncServiceClient.h	/^    int64_t requestCnt_ = 0;$/;"	m	class:ServiceClient
requestSent_	test/client.cpp	/^    int requestSent_ = 0;$/;"	m	class:BlackJackClient	file:
requestTypeToModule	include/common.h	/^requestTypeToModule = {$/;"	v
requestTypeToServiceClient_	include/ProxyServer.h	/^    std::unordered_map<Request::RequestType, std::weak_ptr<ServiceClient>> requestTypeToServiceClient_;$/;"	m	class:ProxyServer
requestTypeToStr	include/common.h	/^requestTypeToStr = {$/;"	v
request_	include/asyncProxyServer.h	/^    Request request_;$/;"	m	struct:AsyncCall
request_	test/RpcServer.h	/^    Request request_;$/;"	m	class:AsyncCall
requests_	test/client.cpp	/^    std::queue<Request> requests_;$/;"	m	class:BlackJackClient	file:
requesttype	include/grpc/UA_BlackJack.pb.h	/^inline ::ua_blackjack::Request_RequestType Request::requesttype() const {$/;"	f	class:ua_blackjack::Request
requesttype_	include/grpc/UA_BlackJack.pb.h	/^  int requesttype_;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
responder_	include/asyncProxyServer.h	/^    ServerAsyncResponseWriter<Response> responder_;$/;"	m	struct:AsyncCall
responder_	test/RpcServer.h	/^    ServerAsyncResponseWriter<Response> responder_;$/;"	m	class:AsyncCall
responseCallBack_	include/Client.h	/^    std::function<void(Response &)> responseCallBack_;$/;"	m	class:Client
responseCallBack_	include/asyncServiceClient.h	/^    std::function<void(const Response&)> responseCallBack_;$/;"	m	class:ServiceClient
responseTime_	test/client.cpp	/^    double responseTime_ = 0;$/;"	m	class:BlackJackClient	file:
response_	test/RpcServer.h	/^    Response response_;$/;"	m	class:AsyncCall
response_reader	include/asyncServiceClient.h	/^        std::unique_ptr<ClientAsyncResponseReader<Response>> response_reader;$/;"	m	struct:ServiceClient::AsyncClientCall
returnFailureResponse	include/asyncProxyServer.h	/^void returnFailureResponse(AsyncCall *call, const std::string &msg)$/;"	f
roomAddress	test/simpleBackEnd.cpp	/^std::string roomAddress   = "localhost:50052";$/;"	v
rpcmethod_Notify_	include/grpc/UA_BlackJack.grpc.pb.h	/^    const ::grpc::internal::RpcMethod rpcmethod_Notify_;$/;"	m	class:ua_blackjack::final::final
sendRequest	test/client.cpp	/^    int sendRequest(Request &request) $/;"	f	class:BlackJackClient
serialization_table	include/grpc/UA_BlackJack.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];$/;"	m	struct:TableStruct_UA_5fBlackJack_2eproto
serverAddr_	test/RpcServer.h	/^    std::string serverAddr_;$/;"	m	class:final
serverAddress_	include/asyncProxyServer.h	/^    std::string serverAddress_;$/;"	m	class:final
server_	include/ProxyServer.h	/^    std::shared_ptr<Net::TcpServer> server_;$/;"	m	class:ProxyServer
server_	include/asyncProxyServer.h	/^    std::unique_ptr<Server> server_;$/;"	m	class:final
server_	test/RpcServer.h	/^    std::unique_ptr<Server> server_;$/;"	m	class:final
serviceAddr_	include/asyncServiceClient.h	/^    std::string serviceAddr_;$/;"	m	class:ServiceClient
serviceName_	include/asyncServiceClient.h	/^    std::string serviceName_;$/;"	m	class:ServiceClient
service_	include/asyncProxyServer.h	/^    ProxyService::AsyncService service_;$/;"	m	class:final
service_	test/RpcServer.h	/^    AsyncRpcService *service_;$/;"	m	class:AsyncCall
service_	test/RpcServer.h	/^    AsyncRpcService service_;$/;"	m	class:final
service_full_name	include/grpc/UA_BlackJack.grpc.pb.h	/^  static constexpr char const* service_full_name() {$/;"	f	class:ua_blackjack::final
setNonBlocking	src/TcpConnection.cc	/^static int setNonBlocking(int fd)$/;"	f	file:
setNonBlocking	src/TcpServer.cc	/^static int setNonBlocking(int fd)$/;"	f	file:
setNonBlocking	test/client.cpp	/^static int setNonBlocking(int fd)$/;"	f	file:
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::set_args(int index, const char* value) {$/;"	f	class:ua_blackjack::Request
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::set_args(int index, const char* value, size_t size) {$/;"	f	class:ua_blackjack::Request
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::set_args(int index, const std::string& value) {$/;"	f	class:ua_blackjack::Request
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Request::set_args(int index, std::string&& value) {$/;"	f	class:ua_blackjack::Request
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::set_args(int index, const char* value) {$/;"	f	class:ua_blackjack::Response
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::set_args(int index, const char* value, size_t size) {$/;"	f	class:ua_blackjack::Response
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::set_args(int index, const std::string& value) {$/;"	f	class:ua_blackjack::Response
set_args	include/grpc/UA_BlackJack.pb.h	/^inline void Response::set_args(int index, std::string&& value) {$/;"	f	class:ua_blackjack::Response
set_has_requesttype	include/grpc/UA_BlackJack.pb.cc	/^  static void set_has_requesttype(HasBits* has_bits) {$/;"	f	class:ua_blackjack::Request::_Internal
set_has_stamp	include/grpc/UA_BlackJack.pb.cc	/^  static void set_has_stamp(HasBits* has_bits) {$/;"	f	class:ua_blackjack::Request::_Internal
set_has_stamp	include/grpc/UA_BlackJack.pb.cc	/^  static void set_has_stamp(HasBits* has_bits) {$/;"	f	class:ua_blackjack::Response::_Internal
set_has_status	include/grpc/UA_BlackJack.pb.cc	/^  static void set_has_status(HasBits* has_bits) {$/;"	f	class:ua_blackjack::Response::_Internal
set_has_uid	include/grpc/UA_BlackJack.pb.cc	/^  static void set_has_uid(HasBits* has_bits) {$/;"	f	class:ua_blackjack::Request::_Internal
set_has_uid	include/grpc/UA_BlackJack.pb.cc	/^  static void set_has_uid(HasBits* has_bits) {$/;"	f	class:ua_blackjack::Response::_Internal
set_log_path	include/log.h	/^inline void set_log_path(const std::string &log_path)$/;"	f
set_logger_name	include/log.h	/^inline void set_logger_name(const std::string &logger_name)$/;"	f
set_requesttype	include/grpc/UA_BlackJack.pb.h	/^inline void Request::set_requesttype(::ua_blackjack::Request_RequestType value) {$/;"	f	class:ua_blackjack::Request
set_stamp	include/grpc/UA_BlackJack.pb.h	/^inline void Request::set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Request
set_stamp	include/grpc/UA_BlackJack.pb.h	/^inline void Response::set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Response
set_status	include/grpc/UA_BlackJack.pb.h	/^inline void Response::set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Response
set_uid	include/grpc/UA_BlackJack.pb.h	/^inline void Request::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Request
set_uid	include/grpc/UA_BlackJack.pb.h	/^inline void Response::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {$/;"	f	class:ua_blackjack::Response
signupStamp_	include/Client.h	/^    int64_t signupStamp_;$/;"	m	class:Client
size	include/CircularBuffer.h	/^    int size() const $/;"	f	struct:Net::CircularBuffer
socialAddress	test/simpleBackEnd.cpp	/^std::string socialAddress = "localhost:50053";$/;"	v
stamp	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Request::stamp() const {$/;"	f	class:ua_blackjack::Request
stamp	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Response::stamp() const {$/;"	f	class:ua_blackjack::Response
stampToAsyncCallLock_	include/asyncProxyServer.h	/^    std::mutex stampToAsyncCallLock_;$/;"	m	class:final
stampToAsyncCall_	include/asyncProxyServer.h	/^    std::unordered_map<int64_t, AsyncCall*> stampToAsyncCall_;$/;"	m	class:final
stampToRequest_	test/client.cpp	/^    std::unordered_map<int64_t, Request> stampToRequest_;$/;"	m	class:BlackJackClient	file:
stampToSignupClientLock_	include/ProxyServer.h	/^    std::mutex stampToSignupClientLock_;$/;"	m	class:ProxyServer
stampToSignupClient_	include/ProxyServer.h	/^    std::unordered_map<int64_t, std::weak_ptr<Client>> stampToSignupClient_;$/;"	m	class:ProxyServer
stampToUnloginClientLock_	include/ProxyServer.h	/^    std::mutex stampToUnloginClientLock_;$/;"	m	class:ProxyServer
stampToUnloginClient_	include/ProxyServer.h	/^    std::unordered_map<int64_t, std::weak_ptr<Client>> stampToUnloginClient_;$/;"	m	class:ProxyServer
stamp_	include/asyncProxyServer.h	/^    int64_t stamp_;$/;"	m	struct:AsyncCall
stamp_	include/grpc/UA_BlackJack.pb.h	/^  ::PROTOBUF_NAMESPACE_ID::int64 stamp_;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
status	include/asyncServiceClient.h	/^        Status status;$/;"	m	struct:ServiceClient::AsyncClientCall
status	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Response::status() const {$/;"	f	class:ua_blackjack::Response
status_	include/asyncProxyServer.h	/^    CallStatus status_;$/;"	m	struct:AsyncCall
status_	include/grpc/UA_BlackJack.pb.h	/^  ::PROTOBUF_NAMESPACE_ID::int64 status_;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
status_	test/RpcServer.h	/^    CallStatus status_;$/;"	m	class:AsyncCall
stop_	include/asyncProxyServer.h	/^    bool stop_ = false;$/;"	m	class:final
stop_	include/asyncServiceClient.h	/^    bool stop_;$/;"	m	class:ServiceClient
stop_client	test/client.cpp	/^void stop_client(int)$/;"	f
stop_server	src/main.cpp	/^void stop_server(int)$/;"	f
stop_server	test/simpleBackEnd.cpp	/^void stop_server(int)$/;"	f
strToRequestType	include/common.h	/^strToRequestType = {$/;"	v
stub	include/grpc/UA_BlackJack.grpc.pb.h	/^      Stub* stub() { return stub_; }$/;"	f	class:ua_blackjack::final::final::final
stub_	include/asyncServiceClient.h	/^    std::unique_ptr<typename ConcreteService::Stub> stub_;$/;"	m	class:ConcreteServiceClient
stub_	include/grpc/UA_BlackJack.grpc.pb.h	/^      Stub* stub_;$/;"	m	class:ua_blackjack::final::final::final
swap	include/grpc/UA_BlackJack.pb.h	/^  friend void swap(Request& a, Request& b) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
swap	include/grpc/UA_BlackJack.pb.h	/^  friend void swap(Response& a, Response& b) {$/;"	f	class:ua_blackjack::PROTOBUF_FINAL
time_point	include/asyncProxyServer.h	/^typedef std::chrono::time_point<std::chrono::system_clock> time_point;$/;"	t
time_point	include/asyncServiceClient.h	/^typedef std::chrono::time_point<std::chrono::system_clock> time_point;$/;"	t
time_point	test/client.cpp	/^typedef std::chrono::time_point<std::chrono::steady_clock> time_point;$/;"	t	file:
toEpollEvent	include/EventLoop.h	/^inline int toEpollEvent(Event events)$/;"	f	namespace:Net
toNetEvent	include/EventLoop.h	/^inline Event toNetEvent(int epEv)$/;"	f	namespace:Net
trivialRpcHandler	test/simpleBackEnd.cpp	/^void trivialRpcHandler(const Request &request, Response &response)$/;"	f
ua_blackjack	include/Client.h	/^namespace ua_blackjack {$/;"	n
ua_blackjack	include/TcpConnection.h	/^namespace ua_blackjack {$/;"	n
ua_blackjack	include/grpc/UA_BlackJack.grpc.pb.cc	/^namespace ua_blackjack {$/;"	n	file:
ua_blackjack	include/grpc/UA_BlackJack.grpc.pb.h	/^namespace ua_blackjack {$/;"	n
ua_blackjack	include/grpc/UA_BlackJack.pb.cc	/^namespace ua_blackjack {$/;"	n	file:
ua_blackjack	include/grpc/UA_BlackJack.pb.h	/^namespace ua_blackjack {$/;"	n
uid	include/Client.h	/^    UserId uid() const {return uid_;}$/;"	f	class:Client
uid	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Request::uid() const {$/;"	f	class:ua_blackjack::Request
uid	include/grpc/UA_BlackJack.pb.h	/^inline ::PROTOBUF_NAMESPACE_ID::int64 Response::uid() const {$/;"	f	class:ua_blackjack::Response
uid	test/client.cpp	/^    UserId uid() const {return uid_;}$/;"	f	class:BlackJackClient
uidToClientLock_	include/ProxyServer.h	/^    std::mutex uidToClientLock_;$/;"	m	class:ProxyServer
uidToClient_	include/ProxyServer.h	/^    std::unordered_map<UserId, std::shared_ptr<Client>> uidToClient_;   $/;"	m	class:ProxyServer
uid_	include/Client.h	/^    UserId uid_ = -1;$/;"	m	class:Client
uid_	include/grpc/UA_BlackJack.pb.h	/^  ::PROTOBUF_NAMESPACE_ID::int64 uid_;$/;"	m	class:ua_blackjack::PROTOBUF_FINAL
uid_	test/client.cpp	/^    UserId uid_ = -1;$/;"	m	class:BlackJackClient	file:
unloginStamp_	include/Client.h	/^    int64_t unloginStamp_;$/;"	m	class:Client
unpack	src/ClientProxyProtocol.cc	/^int NS::unpack(::Net::CircularBuffer &buffer, int32_t *type, std::string &msg)$/;"	f	class:NS
unpack	src/ClientProxyProtocol.cc	/^int NS::unpack(const char *buffer, size_t size, int32_t *type, std::string &msg)$/;"	f	class:NS
waittingResponse_	test/client.cpp	/^    bool waittingResponse_ = false;$/;"	m	class:BlackJackClient	file:
write	src/CircularBuffer.cc	/^int Net::write(int fd, CircularBuffer &buffer, bool freeAfterWrite)$/;"	f	class:Net
writeAs	include/CircularBuffer.h	/^int writeAs(CircularBuffer &buffer, T &in, bool netByteOrder = false)$/;"	f	namespace:Net
writeBuffer_	include/TcpConnection.h	/^    CircularBuffer writeBuffer_;$/;"	m	class:Net::TcpConnection
writeBuffer_	test/client.cpp	/^    CircularBuffer writeBuffer_;$/;"	m	class:BlackJackClient	file:
~AsyncRpcServer	test/RpcServer.h	/^    ~AsyncRpcServer() {server_->Shutdown(); cq_->Shutdown();}$/;"	f	class:final
~CircularBuffer	include/CircularBuffer.h	/^    ~CircularBuffer() {delete [] m_buffer;}$/;"	f	struct:Net::CircularBuffer
~CircularQueue	include/CircularBuffer.h	/^    ~CircularQueue() {delete [] m_buffer;}$/;"	f	class:Net::CircularQueue
~EventLoop	src/EventLoop.cc	/^Net::EventLoop::~EventLoop() $/;"	f	class:Net::EventLoop
~ProxyRpcServer	include/asyncProxyServer.h	/^    ~ProxyRpcServer()$/;"	f	class:final
~Request	include/grpc/UA_BlackJack.pb.cc	/^Request::~Request() {$/;"	f	class:ua_blackjack::Request
~RequestDefaultTypeInternal	include/grpc/UA_BlackJack.pb.cc	/^  ~RequestDefaultTypeInternal() {}$/;"	f	struct:ua_blackjack::RequestDefaultTypeInternal
~Response	include/grpc/UA_BlackJack.pb.cc	/^Response::~Response() {$/;"	f	class:ua_blackjack::Response
~ResponseDefaultTypeInternal	include/grpc/UA_BlackJack.pb.cc	/^  ~ResponseDefaultTypeInternal() {}$/;"	f	struct:ua_blackjack::ResponseDefaultTypeInternal
~Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^DatabaseService::Service::~Service() {$/;"	f	class:ua_blackjack::DatabaseService::Service
~Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^GameService::Service::~Service() {$/;"	f	class:ua_blackjack::GameService::Service
~Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^LobbyService::Service::~Service() {$/;"	f	class:ua_blackjack::LobbyService::Service
~Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^PlayerService::Service::~Service() {$/;"	f	class:ua_blackjack::PlayerService::Service
~Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^ProxyService::Service::~Service() {$/;"	f	class:ua_blackjack::ProxyService::Service
~Service	include/grpc/UA_BlackJack.grpc.pb.cc	/^SocialService::Service::~Service() {$/;"	f	class:ua_blackjack::SocialService::Service
~ServiceClient	include/asyncServiceClient.h	/^    ~ServiceClient() {}$/;"	f	class:ServiceClient
~StubInterface	include/grpc/UA_BlackJack.grpc.pb.h	/^    virtual ~StubInterface() {}$/;"	f	class:ua_blackjack::final::StubInterface
~TcpConnection	src/TcpConnection.cc	/^TcpConnection::~TcpConnection() $/;"	f	class:TcpConnection
~TcpServer	src/TcpServer.cc	/^TcpServer::~TcpServer() $/;"	f	class:TcpServer
~experimental_async_interface	include/grpc/UA_BlackJack.grpc.pb.h	/^      virtual ~experimental_async_interface() {}$/;"	f	class:ua_blackjack::final::StubInterface::experimental_async_interface
